Quanto imprime o programa abaixo?

#include <iostream>
int main() {
  int a[1] = {17};
  int b[1] = {19};
  b[1] = 3;
  std::cout << a[0] << std::endl;
}

Qual é o problema com esse programa?

Como descobrir esse erro?
# Linux:
$> g++ -g -fsanitize=address ArrayOver.cpp
$> ./a.out

# OSX:
$> clang++ -g -fsanitize=address ArrayOver.cpp
$> ./a.out

É possível usar um depurador para descobrir esse tipo de erro?

O que é um depurador?

# OSX:
$> clang++ -g ArrayOver.cpp
$> lldb a.out
(lldb) breakpoint set --name main
(lldb) process launch
(lldb) display a
(lldb) next <ENTER, ENTER, ENTER>

# Linux:
$> g++ -g ArrayOver.cpp
$> gdb ./a.out
(gdb) break
(gdb) run
(gdb) next
(gdb) display a
(gdb) next
(gdb) display b
(gdb) next

Como usar o depurador do VSCode?

* Configure tasks.json:
"Terminal > Configure Default Build Task"

{
  "version": "2.0.0",
  "tasks": [
    {
      "type": "cppbuild",
      "label": "C/C++: clang++ build active file",
      "command": "/usr/bin/clang++",
      "args": [
        "-std=c++17",
        "-stdlib=libc++",
        "-fdiagnostics-color=always",
        "-g",
        "${workspaceFolder}/*.cpp",
        "-o",
        "${fileDirname}/${fileBasenameNoExtension}"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$gcc"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "detail": "compiler: /usr/bin/clang++"
    }
  ]
}

* Configure launch.json:
"Select cpp file > Run > Add Configuration... >  C++ (GDB/LLDB)"

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
          "name": "clang++ - Build and debug active file",
          "type": "lldb",
          "request": "launch",
          "stopAtEntry": true,
          "program": "${fileDirname}/${fileBasenameNoExtension}",
          "args": [],
          "cwd": "${workspaceFolder}",
          "preLaunchTask": "C/C++: clang++ build active file"
        }
      ]
}

* Crie um breakpoint, clicando à esquerda do número de linha

* Dispare o processo de depuração:
"Run > Start Debugging"

* Em "WATCH" use o '+' para adicionar uma nova variável.

* Clique em "step over" para depurar o programa.

E o que imprime o programa abaixo?

#include <iostream>
void arithProg(int* limit, int* sum) {
  *sum = 0;
  for (int i = 0; i < *limit; i++) {
    *sum += i;
  } 
}
int main() {
  int N = 10;
  arithProg(&N, &N);
  std::cout << N << std::endl;
}

Como podemos "entrar" na função arithProg a partir da função main?
* Basta usar "step into"

Como podemos observar todas as variáveis de interesse?
* Use WATCH (N, sum, limit)

E como podemos usar o depurador em linha de comando?

# gdb:
$> g++ -g ArithProg.cpp
$> lldb a.out
(gdb) break main
(gdb) run
(gdb) display N
(gdb) next [ENTER]
(gdb) step
(gdb) display sum
(gdb) display limit
(gdb) quit

# OSX:
$> clang++ -g ArithProg.cpp
$> lldb a.out
(lldb) breakpoint set --name main
(lldb) process launch
(lldb) display N
(lldb) next
(lldb) si # To enter the function
(lldb) display *limit
(lldb) display *sum
(lldb) next

O que poderíamos fazer para tornar a função arithProg mais segura?

#include <assert.h>
void arithProg(int* limit, int* sum) {
  assert(limit != sum);
  *sum = 0;
  for (int i = 0; i < *limit; i++) {
    *sum += i;
  } 
}

O que imprime o programa abaixo?

#include <iostream>
unsigned* getMem() {
  unsigned x[10];
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
} 
int main () {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  std::cout << p2[0] << std::endl;
  p1[0] = 2;
  std::cout << p2[0] << std::endl;
  return 0;
}

O que quer dizer o aviso de compilação?
"warning: address of local variable ‘x’ returned"

O que ocorre se compilarmos esse programa com "-fsanitize=address"?
# Linux:
$> g++ -g -fsanitize=address GetMem.cpp

Como saber o endereço de p1 e p2 via o depurador?

$> clang++ -g GetMem.cpp
$> lldb a.out
(lldb) breakpoint set --name main
(lldb) process launch
(lldb) next <ENTER, ENTER>
(lldb) p p1
(lldb) p p2
(lldb) p &(p1[0])
(lldb) p &(p2[0])

Como saber o endereço de p1 e p2?

int main () {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  printf("&p1: %p, &p2: %p\n", p1, p2);
  std::cout << p2[0] << std::endl;
  p1[0] = 2;
  std::cout << p2[0] << std::endl;
  return 0;
}

O que o programa abaixo imprime?

#include <iostream>
int foo(int v) {
  int a[1];
  a[1] = 17;
  return a[1] + v;
}
int main() {
  int x = 25;
  std::cout << foo(x) << std::endl;
}

Podemos usar "fsanitize=address" para ver o que pode estar errado?

# Linux:
$> g++ OutOfBounds.cpp -g -fsanitize=address
$> ./a.out

# OSX:
$> clang++ -g -fsanitize=address OutOfBounds.cpp
$> ./a.out

Como usar o depurador para saber o que está errado?

$> clang++ -g stack.cpp
$> lldb a.out
(lldb) breakpoint set -name foo
(lldb) process launch
(lldb) frame variable &a[1]
(lldb) frame variable &v

E dá para depurar no VSCode?
- Não há muito suporte para inspeção de memória

Mas podemos imprimir os endereços?

#include <iostream>
#include <stdio.h>
int foo(int v) {
  int a[1];
  printf("&(a[1]): %p, &v: %p\n", &(a[1]), &v);
  a[1] = 17;
  return a[1] + v;
}

Escreva um programa para armazenar em um vetor todos os fatores primos de um
numero inteiro.

#include <vector>
#include <iostream>
int main() {
  int num;
  unsigned next_div = 2;
  std::vector<unsigned> divisors;
  std::cin >> num;
  while (num != 1) {
    if (num % next_div) {
      num /= next_div;
      divisors.push_back(next_div);
    } else {
      next_div++;
    }
  }
  for (unsigned u: divisors) {
    std::cout << "  " << u;
  }
  std::cout << std::endl;
}

O programa abaixo possui um bug. Você consegue encontrá-lo com o depurador?

$> clang++ -g Divisor.cpp
$> lldb a.out
(lldb) breakpoint set -name foo
(lldb) process launch
(lldb) display num
(lldb) display next_div
(lldb) display divisor
(lldb) next [ENTER*]

Como consertar o programa?
  ...
  while (num != 1) {
    if (num % next_div == 0) {
      num /= next_div;
      divisors.push_back(next_div);
    } else {
      next_div++;
    }
  }
  ...

E se passarmos um número negativo, o que ocorre?

Como consertar o programa?
  ...
  std::cin >> num;
  assert(num > 0);
  ...

Estamos testando se números pares são divisores: 4, 6, 8, etc. Como evitar isso?

#include <vector>
#include <iostream>
int testa_divisores(
    std::vector<unsigned>& divisores,
    unsigned next_div,
    int num
) {
  while (num % next_div == 0) {
    num /= next_div;
    divisores.push_back(next_div);
  }
  return num;
}
int main() {
  int num;
  std::vector<unsigned> divisores;
  std::cin >> num;
  assert(num > 0);
  num = testa_divisores(divisores, 2, num);
  unsigned next_div = 3;
  while (num != 1) {
    num = testa_divisores(divisores, next_div, num);
    next_div += 2;
  }
  for (unsigned u: divisores) {
    std::cout << "  " << u;
  }
  std::cout << std::endl;
}

Dá para usar um laço 'for' em vez de um while?
  ...
  for (unsigned next_div = 3; num != 1; next_div += 2) {
    num = testa_divisores(divisores, next_div, num);
  }
  ...