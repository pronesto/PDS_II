### Construtores: padrão e cópia

* Vamos, pela infinitesima vez, criar Pontos! Qual é a interface de um Ponto?

#include <string>
class Point {
  public:
    Point(double xx, double yy): x(xx), y(yy) {}
    void setX(double x) {
      this->x = x;
    }
    void setY(double y) {
      this->y = y;
    }
    std::string to_string() const {
      return "(" + std::to_string(x) + ", " + std::to_string(y) + ")";
    }
  private: 
    double x, y;
};

* O que seria um teste para este programa?

#include <iostream>
#include "Point.hpp"
void test0() {
  Point p0(1.0, 3.14);
  p0.setX(2.0);
  std::cout << p0.to_string() << std::endl;
}
int main() {
  test0();
}

* O código abaixo funcionaria?

void setX(double x) {
  x = x;
}

* Você poderia explicar o comportamento do código acima?

* E o teste abaixo, porque não é possível passar nele?

void test1() {
  Point p0;
  p0.setX(2.0);
  std::cout << p0.to_string() << std::endl;
}

* O que seria a inicialização padrão de um ponto?
...
Point(): Point(0.0, 0.0) {}
...

* A inicialização de doubles com 0.0 é padrão. Podemos simplificar nosso ctor:
...
Point() = default;
...

* O que significa essa chamada de um construtor na lista de inicialização de
  outro construtor?

* Você conseguiria arranjar nossos testes para podermos chamar aquele que quisermos?

int main() {
  int option = 0;
  std::cin >> option;
  switch(option) {
    case 0:
      test0();
      break;
    case 1:
      test1();
      break;
    default:
      std::cerr << "Opcao invalida: " << option << std::endl;
  }
}

* Será que poderíamos definir uma forma de copiar um ponto em outro?

* Como seria o caso de teste?

void test2() {
  Point p0(1.0, 3.14);
  Point p1;
  p1.clone(p0);
  std::cout << p1.to_string() << std::endl;
}

* E como seria o método de cópia?

void clone(const Point& p) {
  x = p.x;
  y = p.y;
}

* O que significa essa assinatura "const Point&"?

* Existe um construtor especial chamado construtor de cópia. Sabe o que é isso?

Point(const Point& p) {
  x = p.x;
  y = p.y;
}

* Como testar o código acima?

void test3() {
  Point p0(1.0, 3.14);
  Point p1(p0);
  std::cout << p1.to_string() << std::endl;
}

* Tem como saber quantos pontos foram criados em qualquer momento do programa?

* Como você poderia implementar isso?

### Variáveis e Métodos Estáticos

* O que é uma variável estática?

#ifndef POINT_H
#define POINT_H
class Point {
  public:
    Point(double xx, double yy): x(xx), y(yy) {}
    Point(): Point(0.0, 0.0) {}
    // ...
  private:
    static unsigned num_points; ///< Declaracao da variavel estatica.
    double x, y;
}
unsigned Point::num_points = 0; ///< Definicao da variavel estatica.
#endif

* Qual é a diferença entre declaraçao e definição?

* Como incrementar a variável estática sempre que um ponto for criado?

#ifndef POINT_H
#define POINT_H
class Point {
  public:
    Point(double xx, double yy): x(xx), y(yy) {
      num_points++;
    }
    Point(): Point(0.0, 0.0) {}
    // ...
  private:
    static unsigned num_points; ///< Variavel estatica!
    double x, y;
}
#endif

* Porque não é preciso incrementar a variável dentro do construtor padrão?

* Como recuperar o valor da variável estática?

#ifndef POINT_H
#define POINT_H
class Point {
  public:
    Point(double xx, double yy): x(xx), y(yy) {}
    Point(): Point(0.0, 0.0) {}
    // ...
    static unsigned get_num_points() {
      return num_points;
    }
  private:
    static unsigned num_points; ///< Declaracao da variavel estatica.
    double x, y;
}
unsigned Point::num_points = 0; ///< Definicao da variavel estatica.
#endif

* O que seria um teste para esse programa?

void test4() {
  Point p0(1.0, 3.14);
  Point p1(1.61, 2.76);
  Point p2;
  Point p3(p0);
  assert(Point::get_num_points() == 4);
}

* São realmente quatro pontos que estamos esperando obter?

* O que aconteceu de errado?

class Point {
  public:
    // Precisamos usar sempre construtores que incrementam a quantidade de pontos:
    //
    Point(double xx, double yy): x(xx), y(yy) {
      num_points++;
    }
    Point(const Point& p): Point(p.x, p.y) {}
    Point(): Point(0.0, 0.0) {}
    ...
}

* Defina um teste para testar a distância entre dois pontos:

void test7() {
  Point p0(1.0, 1.0);
  Point p1(2.0, 1.0);
  assert(Point::distance(&p0, &p1) == 1.0);
}

* Agora, crie um método estático em Point para medir a distância entre dois pontos:

#include <cmath>
static double distance(Point *p1, Point *p2) {
  double x = p1->x - p2->x;
  double y = p1->y - p2->y;
  return sqrt(x*x + y*y);
}

* O que aconteceria nesse teste?

void test0() {
  Point p0(1.0, 3.14);
  p0.setX(2.0);
  std::cout << p0.to_string() << std::endl;
}

void test4() {
  Point p0(1.0, 3.14);
  Point p1(1.61, 2.76);
  Point p2;
  Point p3(p0);
  assert(Point::get_num_points() == 4);
}

void test5() {
  test0();
  test4();
}

* Por que o teste de número de pontos falha? Temos cinco pontos, onde antes se
  esperavam quatro. Por que?

* Como lidar com isso?

### Destrutores

* Vocês já ouviram falar de destrutores?

class Point {
  public:
    ~Point() {
      num_points--;
    }
    // ...
  private:
    static unsigned num_points;
    // ...
};

* Quando um objeto é destruído?

* Quando o objeto p0 será destruído?

void test0() {
  Point p0(1.0, 3.14);
  p0.setX(2.0);
  std::cout << p0.to_string() << std::endl;
}

* E os objetos p0, p1 e p2, quando eles serão destruídos?

void test6() {
  Point *p0 = new Point(1.0, 3.14);
  Point *p1 = new Point(1.61, 2.76);
  Point *p2 = p1;
  std::cout << p0->to_string() << std::endl;
  std::cout << p1->to_string() << std::endl;
  std::cout << p2->to_string() << std::endl;
}

* Como destruir objetos criados no Heap?

void test6() {
  Point *p0 = new Point(1.0, 3.14);
  Point *p1 = new Point(1.61, 2.76);
  Point *p2 = p1;
  std::cout << p0->to_string() << std::endl;
  std::cout << p1->to_string() << std::endl;
  std::cout << p2->to_string() << std::endl;
  delete p0;
  delete p1;
}

* E se tentássemos destruir p2, igual no código abaixo?

void test6() {
  Point *p0 = new Point(1.0, 3.14);
  Point *p1 = new Point(1.61, 2.76);
  Point *p2 = p1;
  std::cout << p0->to_string() << std::endl;
  std::cout << p1->to_string() << std::endl;
  std::cout << p2->to_string() << std::endl;
  delete p0;
  delete p1;
  delete p2;
}

* Para que serve o destrutor?
- Para liberar recursos!

* Crie uma classe Segment, que represente um segmento de reta, formado por dois
  pontos.

* Qual deveria ser a interface do segmento?

#ifndef SEGMENT_H
#define SEGMENT_H
class Segment {
  public:
    ...
    std::string to_string() const;
    double length() const;
};
#endif

* Implemente esse TAD, adicionando um construtor para criar os pontos:

#ifndef SEGMENT_H
#define SEGMENT_H
#include "Point.hpp"
class Segment {
  public:
    Segment(double x0, double y0, double x1, double y1) {
      _p0 = new Point(x0, y0);
      _p1 = new Point(x1, y1);
    }
    std::string to_string() const {
      return _p0->to_string() + " -> " + _p1->to_string();
    }
    double length() const {
      return Point::distance(_p0, _p1);
    }
  private:
    Point *_p0, *_p1;
};
#endif

* Essa classe irá criar um vazamento de memória. Por que?

class Segment {
  public:
    ...
    ~Segment() {
      delete _p0;
      delete _p1;
    }
    ...
};

* Imagine que Point::distance fosse definida assim:
static double distance(const Point &p1, const Point &p2) {
  double x = p1.x - p2.x;
  double y = p1.y - p2.y;
  return sqrt(x*x + y*y);
}

Nesse caso, como Point::distance poderia ser usada em Segment?
double length() const {
  return Point::distance(*_p0, *_p1);
}

* Seria possível declarar os Pontos como constantes em Segment?
// Sure!
class Segment {
  private:
    const Point *_p0, *_p1;
};
