Onde ficam armazenados os valores que um programa manipula?

Será que há algum valor que não fica em memória?

E quais memórias existem no computador?

Como a memória do programa é dividida?
- static
- heap
- stack

O que seria memória estática?

Onde fica armazenado o arranjo x do programa abaixo?

#include <iostream>
int main(void) {
  int x[] = {2, 3, 5, 7, 11, 13, 17, 19};
  for (int i : x) {
    std::cout << i << std::endl;
  } 
  return 0;
}

Como ver isso no código assembly?
$> clang++ -S -std=c++11 static_1.cpp

E strings, onde elas ficam?

Você consegue ver a string no código assembly do programa abaixo?

#include <iostream>
int main (void) {
  std::string str = "Hello";
  str[1] = 'u';
  std::cout << str << std::endl;
  return 0;
}

E as variáveis globais? Por exemplo, onde fica 'global_var' no programa abaixo?

#include <iostream>
int global_var = 13;
int main(void) {
  int local_var = 17;
  std::cout << local_var << std::endl;
  std::cout << global_var << std::endl;
}

E 'local_var', você consegue vê-la no código assembly?

Você já ouviu falar de variáveis estáticas?

O que será impresso pelo programa abaixo?

#include <iostream>
int getAndSet(void) {
  static int counter = 0;
  return ++counter;
}
int main(void) {
  std::cout << getAndSet() << std::endl;
  std::cout << getAndSet() << std::endl;
  std::cout << getAndSet() << std::endl;
}

E quantas variáveis 'counter' existem no programa abaixo?

#include <iostream>
int getAndSet_1(void) {
  static int counter = 0;
  return ++counter;
}
int getAndSet_2(void) {
  static int counter = 0;
  return ++counter;
}
int main(void) {
  for (int i = 0; i < 7; i++) {
    std::cout << "1) " << getAndSet_1() << std::endl;
    std::cout << "2) " << getAndSet_2() << std::endl;
  } 
}

E quantas variáveis 'counter' existem no programa abaixo?

#include <iostream>
static int counter = 0; 
int getAndSet_1(void) {
  return ++counter;
}
int getAndSet_2(void) {
  return ++counter;
}
int main(void) {
  for (int i = 0; i < 7; i++) {
    std::cout << "1) " << getAndSet_1() << std::endl;
    std::cout << "2) " << getAndSet_2() << std::endl;
  }
}

O que fica armazenado na pilha?

Você consegue imprimir o endereço de 'aux' no programa abaixo?

#include <iostream>
int fact (int n) {
  int aux = n;
  // printf("(%p, %d)\n", &aux, n);
  if (aux > 1) {
    return aux * fact(aux - 1);
  } else {
    return 1;
  } 
}
int main(int argc, char** argv) {
  std::cout << fact(argc) << std::endl;
  return 0;
}

O que perderíamos se não existisse a pilha? Quais programas deixariam de funcionar?

Você lembra qual era o problema deste programa abaixo?

#include <stdio.h>
unsigned* getMem(void) {
  unsigned x[10];
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
} 
int main (void) {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  p1[0] = 2;
  p2[0] = 13;
  printf("p1 = %d\n", p1[0]);
}

Como consertar esse programa?

#include <iostream>
 
unsigned* getMem(void) {
  unsigned *x = new unsigned[10];
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
}

int main (void) {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  p1[0] = 2;
  p2[0] = 13;
  printf("p1 = %d\n", p1[0]);
}

Onde o arranjo criado pela função getMem é alocado?

Esse programa possui um vazamento de memória. Como observar isso?
(linux) g++ -g -fsanitize=address GetMem.cpp
(linux) ./a.out

Vocês já ouviram falar de uma ferramenta chamada valgrind?
(linux) g++ -g GetMem.cpp
(linux) valgrind ./a.out

Como saber onde a memória foi alocada?
(linux) valgrind --leak-check=full ./a.out

Como liberar a memória apontada por 'x', depois que 'x' já não é mais usada?

int main (void) {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  p1[0] = 2;
  p2[0] = 13;
  printf("p1 = %d\n", p1[0]);
  delete[] p1;
  delete[] p2;
}

Como seria o programa equivalente escrito em C?

#include <iostream>
unsigned* getMem(void) {
  unsigned *x = (unsigned*)malloc(10*sizeof(unsigned));
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
}
int main (void) {
  unsigned *p1 = getMem();
  unsigned *p2 = getMem();
  p1[0] = 2;
  p2[0] = 13;
  printf("p1 = %d\n", p1[0]);
  free(p1);
  free(p2);
}

Qual é o problema do programa abaixo?

#include <stdio.h>
unsigned* getMem(void) {
  unsigned *x = new unsigned[10];
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
}
int main (void) {
  unsigned *p1 = getMem();
  p1[0] = 2;
  printf("p1 = %d\n", p1[0]);
  delete p1;
  printf("p1 = %d\n", p1[0]);
}

Como capturar esse problema com valgrind?

(linux) g++ -g Dangling.cpp
(linux) valgrind ./a.out

Pela saída de valgrind, onde acontece a alocação, a deleção e a leitura 
inválida?

Como capturar este problema usando address sanitizer?

$> clang++ -fsanitize=address file.cpp
$> ./a.out

E este programa abaixo, o que ele imprime?

#include <stdio.h> 
unsigned* getMem(void) {
  unsigned *x = new unsigned[10];
  int i;
  for (i = 0; i < 10; i++) {
    x[i] = i;
  }
  return x;
}
int main (void) {
  unsigned *p1 = getMem();
  p1[0] = 2;
  printf("p1 = %d\n", p1[0]);
  delete p1;
  unsigned *p2 = getMem();
  p2[0] = 13;
  printf("p2 = %d\n", p2[0]);
  p1[0] = 19;
  printf("p2 = %d\n", p2[0]);
}

Como capturar este problema usando address sanitizer?

$> clang++ -fsanitize=address file.cpp
$> ./a.out

Passagem de parâmetros
======================

O código abaixo consegue trocar o valor das variáveis 'x' e 'y'?

#include <iostream>
void swap(int x, int y) {
  int tmp = x;
  x = y;
  y = tmp;
}
int main(void) {
  int a = 2;
  int b = 3;
  std::cout << "a = " << a << ", b = " << b << std::endl;
  swap(a, b);
  std::cout << "a = " << a << ", b = " << b << std::endl;
}

Como consertar esse código?

#include <iostream>  
void swap(int* x, int* y) {
  int tmp = *x;
  *x = *y;
  *y = tmp;
}
int main(void) {
  int a = 2;
  int b = 3;
  std::cout << "a = " << a << ", b = " << b << std::endl;
  swap(&a, &b);
  std::cout << "a = " << a << ", b = " << b << std::endl;
}

Vocês já ouviram falar de 'referências'?

A implementação abaixo de 'swap' funciona?

void swapR(int& x, int& y) {
  int tmp = x;
  x = y;
  y = tmp;
}

Qual a diferença entre ponteiros e referências?
- Inicialização:
#include <iostream>
int main(void) {
  int j = 2;
  int& i0 = nullptr; // Nao funciona
  int& i1 = 0;       // Nao funciona
  int& i2;           // Nao funciona
  int& i3 = j;       // Funciona
  std::cout << i0 << std::endl;
  std::cout << i1 << std::endl;
  std::cout << i2 << std::endl;
  std::cout << i3 << std::endl;
}

- Re-atribuicao
int main(void) {
  int j0 = 2;
  int& i1 = j0;       // Funciona
  int j1 = 3;
  i1 = j1;            // Nao funciona
  return 0;
}

- Aritmetica:
#include <iostream>
int main(void) {
  int x[] = {2, 3, 5, 7, 11, 13, 17, 19};
  int *p = x;
  while (*p != 19) {
    std::cout << *p << std::endl;
    ++p; // Nao existe um equivalente com referencias.
  }
  return 0;
}

Qual é o problema com ponteiros e referências?

Você poderia explicar a diferença de tempo entre sum_copy e sum_ref?

#include <vector>
#include <chrono>
#include <iostream>

long sum_copy(std::vector<int> v) {
  long sum = 0;
  for (int i: v) {
    sum += i;
  }
  return sum;
}

long sum_ref(std::vector<int>& v) {
  long sum = 0;
  for (int i: v) {
    sum += i;
  }
  return sum;
}

int main(void) {
  std::chrono::steady_clock::time_point begin, end;
  unsigned vec_size;
  std::cin >> vec_size;

  std::vector<int> v;
  for (int i = 0; i < vec_size; i++) {
    v.push_back(i);
  }
  begin = std::chrono::steady_clock::now();

  std::cout << sum_copy(v) << std::endl;

  end = std::chrono::steady_clock::now();
  std::cout << "Tempo sum_copy = " <<
    std::chrono::duration_cast<std::chrono::microseconds>
    (end - begin).count() << "us" << std::endl;

  begin = std::chrono::steady_clock::now();

  std::cout << sum_ref(v) << std::endl;

  end = std::chrono::steady_clock::now();
  std::cout << "Tempo sum_ref = " <<
    std::chrono::duration_cast<std::chrono::microseconds>
    (end - begin).count() << "us" << std::endl;
}
