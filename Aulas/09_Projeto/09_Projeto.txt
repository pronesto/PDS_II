Como voces especificam um programa?

E como voces organizam o desenvolvimento do programa?

Quando o desenvolvimento comeca a ficar dificil?

O que podemos fazer para facilitar a tarefa de desenvolver software?

Voces conhecem alguma tecnica para especificar um programa?

Ja ouviram falar e user stories?
"Enquanto <papel> quer ser capaz de <acao> de modo a <consequencia>"

Poderiam me dar um exemplo?
"Enquanto:
   Contador
 Quero ser capaz de:
   ler expressoes aritmeticas formadas por multiplicacao, divisao, soma e
   subtracao,
 De modo a:
   obter o numero que eh produzido pelo calculo da expressao aritmetica."

Serah que poderiamos estabelecer um contrato com essa user story?
"Deve haver um espaco entre cada numero e cada operador."

O que seriam exemplos validos de expressoes aritmeticas?
2
2 * 3 + 4 - 1
2 * 2 + 1
2 + 3 * 4

O que seria o resultado esperado para cada uma dessas expressoes?
2 = 2
2 * 3 + 4 - 1 = 9
2 * 2 + 1 = 5
2 + 3 * 4 = 14

Que tipo de estrutura de dados precisaríamos para resolver esse problema?

Como especificar uma estrutura de dados desse tipo?

Qual seria o nome dela?
"Tokenizer"

Quais seriam as responsabilidades dessa estrutura?
"Manter a lista de tokens"
"Informar o próximo token a ser lido"
"Avançar o próximo token"
"Mostrar todos os tokens lidos"

Quais outras estruturas seriam necessárias para o Tokenizer funcionar?
std::vector

Acabamos de criar um cartão CRC (class-responsibility-collaboration). O que é isso?

Como implementar a classe descrita em nosso cartão?

struct Tokenizer {
  private:
    std::vector<std::string> tokens;
    unsigned token_atual;
  public:
    Tokenizer(): token_atual(0) {}
    void insira_mais_um_token(std::string token) {
      tokens.push_back(token);
    }
    bool ha_mais_tokens() const {
      return token_atual < tokens.size();
    }
    std::string proximo_token() const {
      return tokens[token_atual];
    }
    void avance_mais_um_token() {
      token_atual++;
    }
    void imprima_os_tokens_restantes() const {
      for (unsigned i = token_atual; i < tokens.size(); i++) {
        std::cout << i << ": " << tokens[i] << std::endl;
      }
    }
};

Como descrever o formato da entrada de dados?
"Gramática"

Qual seria a gramática para representar os nossos dados?

<exp> ::= <mulexp> + <exp> 
       | <mulexp> - <exp> 
       | <mulexp>
<mulexp> ::= <numexp> / <mulexp>
          | <numexp> * <mulexp>
          | <numexp>

Quais seriam as interações entre o calculador e o tokenizer, para implementar uma "exp", por exemplo?
1. Calc invoka mulexp sobre Tk. Seja o resultado m
2. Calc pergunta para Tk se há mais tokens
3. Se houver mais tokens, então:
   3.a Calc pede próximo token para Tk.
4. Se próximo token for '+', então:
   4.a Calc pede a Tk para avançar próximo token
   4.b Calc invoka exp sobre Tk e adiciona o resultado a m
5. Se próximo token for '-', então:
   5.a Calc pede a Tk para avançar próximo token
   5.b Calc invoka exp sobre Tk e subtrai o resultado a m

Como implementar esse algoritmo?

double exp(Tokenizer& tk) {
  double m = mul_exp(tk);
  if (tk.ha_mais_tokens()) {
    std::string operador = tk.proximo_token();
    if (operador == "+") {
      tk.avance_mais_um_token();
      m += exp(tk);
    } else if (operador == "-") {
      tk.avance_mais_um_token();
      m -= exp(tk);
    }
  }
  return m;
}

E como implementar a parte de <mulexp>?

double mul_exp(Tokenizer& tk) {
  double n = num_exp(tk);
  if (tk.ha_mais_tokens()) {
    std::string operador = tk.proximo_token();
    if (operador == "/") {
      tk.avance_mais_um_token();
      n /= mul_exp(tk);
    } else if (operador == "*") {
      tk.avance_mais_um_token();
      n *= mul_exp(tk);
    }
  }
  return n;
}

E o que seria um <numexp>

double num_exp(Tokenizer& tk) {
  std::string token = tk.proximo_token();
  tk.avance_mais_um_token();
  return std::stod(token);
}

O que seria uma função main que usa esses códigos?

int main() {
  Tokenizer tk;
  std::string token;
  while (std::cin >> token) {
    tk.insira_mais_um_token(token);
  }
  std::cout << exp(tk) << std::endl;
}